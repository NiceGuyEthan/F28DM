<data>

<!--UPDATE WITH YOUR USERNAME -->
    <USERNAME>tr2080</USERNAME>

<!--START OF EXAMPLE -->
    <question id="0">
        <answer>1094</answer>
        <sql>
            SELECT COUNT(*) FROM trajectory.tracking;
        </sql>
    </question>
<!--END OF EXAMPLE -->

<!--START OF YOUR ANSWERS and SQL STATEMENTS-->

    <question id="1">
        <answer>The Lodger (1898)</answer>
        <sql>
            SELECT title 
            FROM imdb.movies 
            WHERE year = (SELECT MIN(year) FROM imdb.movies);
        </sql>
    </question>

    <question id="2">
        <answer>2</answer>
        <sql>
       SELECT COUNT(movieid) 
       FROM (SELECT movieid, COUNT(directorid) AS director_count 
       FROM imdb.movies2directors 
       GROUP BY movieid 
       HAVING COUNT(directorid) > 7) AS subquery;

        </sql>
    </question>

    <question id="3">
        <answer>1940</answer>
        <sql>
       SELECT m.year 
       FROM imdb.movies m
       JOIN imdb.movies2directors md ON m.movieid = md.movieid
       GROUP BY m.movieid, m.year
       ORDER BY COUNT(md.directorid) DESC
       LIMIT 1;
        </sql>
    </question>

    <question id="4">
        <answer>2500324</answer>
        <sql>
        
        </sql>
    </question>

    <question id="5">
        <answer>3</answer>
        <sql>
      SELECT COUNT(*) 
      FROM (SELECT m2a1.actorid AS actor1, m2a2.actorid AS actor2, COUNT(*) AS films_together
      FROM imdb.movies2actors m2a1
      JOIN imdb.movies2actors m2a2 ON m2a1.movieid = m2a2.movieid
      WHERE m2a1.actorid < m2a2.actorid
      GROUP BY m2a1.actorid, m2a2.actorid
      HAVING COUNT(*) > 10) AS subquery;
        </sql>
    </question>

    <question id="6">
        <answer>1930</answer>
        <sql>
        SELECT (year / 10) * 10 AS decade
        FROM imdb.movies m
        JOIN imdb.ratings r ON m.movieid = r.movieid
        GROUP BY decade
        ORDER BY AVG(CAST(r.rank AS double precision)) DESC
        LIMIT 1;
        </sql>
    </question>

    <question id="7">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="8">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="9">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="10">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="11">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="12">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="13">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="14">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="15">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="16">
        <answer>8</answer>
        <sql>
        WITH quake_periods AS (
        SELECT 
        DATE_TRUNC('hour', '2010-01-01 00:00:00'::timestamp + 
        INTERVAL '48 hours' * FLOOR(EXTRACT(EPOCH FROM (datetime - '2010-01-01 00:00:00'::timestamp)) / (48 * 3600))) 
        AS period_start,
        COUNT(*) AS quake_count
        FROM quakes.scotquakes
        GROUP BY period_start
        )
        SELECT period_start AS start_time, quake_count
        FROM quake_periods
        ORDER BY quake_count DESC
        LIMIT 1;
        </sql>
    </question>

    <question id="17">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="18">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="19">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="20">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="21">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="22">
        <answer>08</answer>
        <sql>
            SELECT 
            EXTRACT(MONTH FROM date_taken) AS month, 
            COUNT(*) AS photo_count
            FROM flickr.flickr_edin
            GROUP BY month
            ORDER BY photo_count DESC
            LIMIT 1;  
        </sql>
    </question>


    <question id="23">
        <answer>19473027@N00</answer>
        <sql>
            SELECT 
            f.userid, 
            COUNT(DISTINCT g.id) AS unique_locations
            FROM flickr.flickr_edin f
            JOIN flickr.grid100m g 
            ON ST_Intersects(f.geom, g.geom)
            GROUP BY f.userid
            ORDER BY unique_locations DESC
            LIMIT 1;
        </sql>
    </question>

    <question id="24">
        <answer></answer>
        <sql>
       
        </sql>
    </question>

    <question id="25">
        <answer></answer>
        <sql>
       
        </sql>
    </question>


<!--END OF ANSWERS -->

</data>
